using System.Collections.Generic;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Pando.SerializerGenerator.Utils;

namespace Pando.SerializerGenerator;

public static class GeneratedSerializerRenderer
{
	public static SourceText Render(AssemblyName assembly, INamedTypeSymbol type, List<SerializedProp> propList)
	{
		var serializerName = $"{type.Name}Serializer";
		var nestedTypeString = type.ToDisplayString(CustomSymbolDisplayFormats.NestedTypeName);
		var typeNamespaceString = type.ContainingNamespace.ToDisplayString(CustomSymbolDisplayFormats.FullyQualifiedTypeName);

		var sb = new StringBuilder(2000);

		sb.Append(@"#nullable enable
// <auto-generated />
using System;
using System.CodeDom.Compiler;
using Pando.DataSources;
using Pando.Serialization.NodeSerializers;
"
		);
		sb.AppendFormat("using {0};\n\n", typeNamespaceString);

		sb.AppendLine("namespace GeneratedSerializers;");

		sb.AppendFormat("\n[GeneratedCode(\"{0}\", \"{1}\")]\n", assembly.Name, assembly.Version);
		sb.AppendFormat("public class {0} : INodeSerializer<{1}>\n", serializerName, nestedTypeString);
		sb.AppendLine("{");

		foreach (var prop in propList)
		{
			sb.AppendFormat("    private INodeSerializer<{0}> _{1}Serializer;\n", prop.Type, prop.Name);
		}

		sb.AppendLine();
		sb.AppendFormat("    public {0}(\n", serializerName);

		for (var i = 0; i < propList.Count; i++)
		{
			var prop = propList[i];
			var comma = (i + 1 == propList.Count) ? string.Empty : ",";
			sb.AppendFormat("        INodeSerializer<{0}> {1}Serializer{2}\n", prop.Type, prop.Name, comma);
		}

		sb.AppendLine("    )");
		sb.AppendLine("    {");

		foreach (var prop in propList)
		{
			sb.AppendFormat("        _{0}Serializer = {0}Serializer;\n", prop.Name);
		}

		sb.AppendFormat("\n        NodeSize = {0} * sizeof(ulong);\n", propList.Count);
		sb.AppendLine("    }");

		sb.AppendLine("\n    public int? NodeSize { get; }");

		sb.AppendFormat("\n    public int NodeSizeForObject({0} obj) => NodeSize!.Value;\n", nestedTypeString);

		sb.AppendFormat(
			"\n    public void Serialize({0} obj, Span<byte> writeBuffer, INodeDataSink dataSink) => throw new NotImplementedException();\n",
			nestedTypeString
		);
		
		sb.AppendFormat(
			"\n    public {0} Deserialize(ReadOnlySpan<byte> readBuffer, INodeDataSource dataSource) => throw new NotImplementedException();",
			nestedTypeString
		);

		sb.AppendLine("\n}");

		return SourceText.From(sb.ToString(), Encoding.UTF8);
	}
}
