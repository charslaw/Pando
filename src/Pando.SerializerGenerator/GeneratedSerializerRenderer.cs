using System;
using System.Buffers.Binary;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using Pando.SerializerGenerator.Utils;

namespace Pando.SerializerGenerator;

public static class GeneratedSerializerRenderer
{
	public static SourceText Render(AssemblyName assembly, INamedTypeSymbol type, List<SerializedProp> propList)
	{
		var serializerName = $"{type.Name}Serializer";
		var nestedTypeString = type.ToDisplayString(CustomSymbolDisplayFormats.NestedTypeName);

		var (primitives, nodes) = GetPropCollections(propList);

		var writer = new IndentedTextWriter(new StringWriter(), "\t");

		writer.WriteLine("#nullable enable");
		writer.WriteLine("// <auto-generated />");
		writer.BlankLine();

		WriteUsings(writer, type, propList);

		writer.BlankLine();
		writer.WriteLine("namespace GeneratedSerializers;");
		writer.BlankLine();

		writer.WriteLine("[GeneratedCode(\"{0}\", \"{1}\")]", assembly.Name, assembly.Version);
		writer.WriteLine("{0} class {1} : INodeSerializer<{2}>", SyntaxFacts.GetText(type.DeclaredAccessibility), serializerName, nestedTypeString);

		// Class body
		writer.BodyIndent(() =>
			{
				// Declare child serializers
				foreach (var prop in propList)
				{
					writer.WriteLine("private readonly {0} _{1};", prop.SerializerType.GenericName, prop.SerializerName);
				}

				writer.BlankLine();

				// Constructor
				writer.WriteLine("public {0}(", serializerName);
				writer.DoIndent(() =>
					{
						for (var i = 0; i < propList.Count; i++)
						{
							var prop = propList[i];
							var comma = (i + 1 == propList.Count) ? string.Empty : ",";
							writer.WriteLine("{0} {1}{2}", prop.SerializerType.GenericName, prop.SerializerName, comma);
						}
					}
				);
				writer.WriteLine(")");

				// Constructor body
				writer.BodyIndent(() =>
					{
						foreach (var prop in propList)
						{
							writer.WriteLine("_{0} = {0};", prop.SerializerName);
						}
						writer.BlankLine();
						
						// Calculate node size
						writer.WriteLine("int? size = 0;");

						foreach (var prop in primitives)
						{
							writer.WriteLine("size += _{0}.ByteCount;", prop.SerializerName);
						}
						
						writer.WriteLine("size += {0} * sizeof(ulong);", nodes.Count);
						
						writer.WriteLine("NodeSize = size;");
					}
				);
				writer.BlankLine();

				// NodeSize property
				writer.WriteLine("public int? NodeSize { get; }");
				writer.BlankLine();

				// NodeSizeForObject method
				writer.WriteLine("public int NodeSizeForObject({0} obj) => NodeSize!.Value;", nestedTypeString);
				writer.BlankLine();

				// Serialize method
				writer.WriteLine(
					"public void Serialize({0} obj, Span<byte> writeBuffer, INodeDataSink dataSink) => throw new NotImplementedException();",
					nestedTypeString
				);
				writer.BlankLine();

				// Deserialize method
				writer.WriteLine(
					"public {0} Deserialize(ReadOnlySpan<byte> readBuffer, INodeDataSource dataSource) => throw new NotImplementedException();",
					nestedTypeString
				);
			}
		);

		return SourceText.From(writer.InnerWriter.ToString(), Encoding.UTF8);
	}

	private static void WriteUsings(IndentedTextWriter writer, INamedTypeSymbol typeSymbol, List<SerializedProp> propList)
	{
		var usings = new SortedSet<string>(new NamespaceComparer())
		{
			typeof(object).Namespace!,
			typeof(GeneratedCodeAttribute).Namespace!,
			"Pando.DataSources",
			typeSymbol.ContainingNamespace.ToDisplayString(CustomSymbolDisplayFormats.FullyQualifiedTypeName)
		};

		var binaryBuffersNs = typeof(BinaryPrimitives).Namespace!;
		foreach (var prop in propList)
		{
			if (prop.IsPrimitive)
			{
				usings.Add("Pando.Serialization.PrimitiveSerializers");
			}
			else
			{
				usings.Add("Pando.Serialization.NodeSerializers");
				usings.Add(binaryBuffersNs);
			}

			usings.Add(prop.Type.ContainingNamespace.ToDisplayString(CustomSymbolDisplayFormats.FullyQualifiedTypeName));
		}

		foreach (var u in usings)
		{
			writer.WriteLine("using {0};", u);
		}
	}

	private static (List<SerializedProp> primitives, List<SerializedProp> nodes) GetPropCollections(List<SerializedProp> propList)
	{
		List<SerializedProp> primitives = new();
		List<SerializedProp> nodes = new();
		foreach (var prop in propList)
		{
			if (prop.IsPrimitive)
				primitives.Add(prop);
			else
				nodes.Add(prop);
		}

		return (primitives, nodes);
	}
}

internal class NamespaceComparer : IComparer<string>
{
	public int Compare(string x, string y)
	{
		var xIsSystem = x?.StartsWith("System");
		var yIsSystem = y?.StartsWith("System");
		if (xIsSystem is null || yIsSystem is null || xIsSystem == yIsSystem) return StringComparer.Ordinal.Compare(x, y);

		return xIsSystem.Value ? -1 : 1;
	}
}
