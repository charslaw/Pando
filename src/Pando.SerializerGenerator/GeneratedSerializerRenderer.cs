using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Pando.SerializerGenerator.Utils;

namespace Pando.SerializerGenerator;

public static class GeneratedSerializerRenderer
{
	public static SourceText Render(AssemblyName assembly, INamedTypeSymbol type, List<SerializedProp> propList)
	{
		var serializerName = $"{type.Name}Serializer";
		var nestedTypeString = type.ToDisplayString(CustomSymbolDisplayFormats.NestedTypeName);
		var typeNamespaceString = type.ContainingNamespace.ToDisplayString(CustomSymbolDisplayFormats.FullyQualifiedTypeName);

		var writer = new IndentedTextWriter(new StringWriter(), "\t");

		writer.WriteLine("#nullable enable");
		writer.WriteLine("// <auto-generated />");
		writer.WriteLine("using System;");
		writer.WriteLine("using System.CodeDom.Compiler;");
		writer.WriteLine("using Pando.DataSources;");
		writer.WriteLine("using Pando.Serialization.NodeSerializers;");
		writer.WriteLine("using {0};", typeNamespaceString);
		writer.BlankLine();

		writer.WriteLine("namespace GeneratedSerializers;");

		writer.WriteLine("\n[GeneratedCode(\"{0}\", \"{1}\")]", assembly.Name, assembly.Version);
		writer.WriteLine("public class {0} : INodeSerializer<{1}>", serializerName, nestedTypeString);

		writer.BodyIndent(() =>
			{
				foreach (var prop in propList)
				{
					writer.WriteLine("private INodeSerializer<{0}> _{1}Serializer;", prop.Type, prop.Name);
				}

				writer.BlankLine();

				writer.WriteLine("public {0}(", serializerName);
				writer.DoIndent(() =>
					{
						for (var i = 0; i < propList.Count; i++)
						{
							var prop = propList[i];
							var comma = (i + 1 == propList.Count) ? string.Empty : ",";
							writer.WriteLine("INodeSerializer<{0}> {1}Serializer{2}", prop.Type, prop.Name, comma);
						}
					}
				);
				writer.WriteLine(")");

				writer.BodyIndent(() =>
					{
						foreach (var prop in propList)
						{
							writer.WriteLine("_{0}Serializer = {0}Serializer;", prop.Name);
						}

						writer.BlankLine();
						writer.WriteLine("NodeSize = {0} * sizeof(ulong);", propList.Count);
					}
				);

				writer.BlankLine();
				writer.WriteLine("public int? NodeSize { get; }");

				writer.BlankLine();
				writer.WriteLine("public int NodeSizeForObject({0} obj) => NodeSize!.Value;", nestedTypeString);

				writer.BlankLine();
				writer.WriteLine(
					"public void Serialize({0} obj, Span<byte> writeBuffer, INodeDataSink dataSink) => throw new NotImplementedException();",
					nestedTypeString
				);

				writer.BlankLine();
				writer.WriteLine(
					"public {0} Deserialize(ReadOnlySpan<byte> readBuffer, INodeDataSource dataSource) => throw new NotImplementedException();",
					nestedTypeString
				);
			}
		);

		writer.BlankLine();
		writer.WriteLine("}");

		writer.Close();
		return SourceText.From(writer.InnerWriter.ToString(), Encoding.UTF8);
	}
}
