using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Pando.SerializerGenerator.Utils;
using Scriban;
using Scriban.Runtime;

namespace Pando.SerializerGenerator;

public record SerializedProp(string Type, string Name, bool IsPrimitive);

public static class GeneratedSerializerRenderer
{
	private static readonly Lazy<Template> parsedTemplate = new(() => Template.Parse(TEMPLATE));

	public static string Render(AssemblyName assembly, INamedTypeSymbol type, List<SerializedProp> propList)
	{
		var serializerName = $"{type.Name}Serializer";
		var nestedTypeString = type.ToDisplayString(CustomSymbolDisplayFormats.NestedTypeName);
		var fullyQualifiedTypeString = type.ToDisplayString(CustomSymbolDisplayFormats.FullyQualifiedTypeName);
		var typeNamespaceString = type.ContainingNamespace.ToDisplayString(CustomSymbolDisplayFormats.FullyQualifiedTypeName);

		var contextObject = new ScriptObject
		{
			{ nameof(assembly), assembly },
			{ nameof(serializerName), serializerName },
			{ nameof(nestedTypeString), nestedTypeString },
			{ nameof(fullyQualifiedTypeString), fullyQualifiedTypeString },
			{ nameof(typeNamespaceString), typeNamespaceString },
			{ nameof(propList), propList }
		};

		return parsedTemplate.Value.Render(contextObject);
	}

	private const string TEMPLATE = @"#nullable enable
// <auto-generated />
using System;
using System.CodeDom.Compiler;
using Pando.DataSources;
using Pando.Serialization.NodeSerializers;
using {{ typeNamespaceString }};

namespace GeneratedSerializers;

[GeneratedCode(""{{ assembly.name }}"", ""{{ assembly.version }}"")]
public class {{ serializerName }} : INodeSerializer<{{ nestedTypeString }}>
{
{{~ for prop in propList ~}}
	private INodeSerializer<{{ prop.type }}> _{{ prop.name }}Serializer;
{{~ end ~}}

	public {{ serializerName }}(
{{- for prop in propList -}}
	INodeSerializer<{{ prop.type }}> {{ prop.name }}Serializer {{- if !for.last; ', '; end; -}}
{{- end -}}
	)
	{
{{~ for prop in propList ~}}
		_{{ prop.name }}Serializer = {{ prop.name }}Serializer;
{{~ end ~}}

		NodeSize = {{ propList.size }} * sizeof(ulong);
	}

	public int? NodeSize { get; }

	public int NodeSizeForObject({{ nestedTypeString }} obj) => NodeSize!.Value;

	public void Serialize({{ nestedTypeString }} obj, Span<byte> writeBuffer, INodeDataSink dataSink) =>
		throw new NotImplementedException();

	public {{ nestedTypeString }} Deserialize(ReadOnlySpan<byte> readBuffer, INodeDataSource dataSource) =>
		throw new NotImplementedException();
}";
}
