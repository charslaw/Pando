using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Pando.SerializerGenerator.Utils;
using Scriban;
using Scriban.Runtime;

namespace Pando.SerializerGenerator;

public record Param(string Type, string Name);

public static class GeneratedSerializerRenderer
{
	private static readonly Lazy<Template> renderedTemplate = new(() => Template.Parse(TEMPLATE));

	public static (string filename, string contents) Render(AssemblyName assembly, INamedTypeSymbol type, List<Param> paramList)
	{
		var serializerName = $"{type.Name}Serializer";
		var nestedTypeString = type.ToDisplayString(CustomSymbolDisplayFormats.NestedTypeName);
		var fullyQualifiedTypeString = type.ToDisplayString(CustomSymbolDisplayFormats.FullyQualifiedTypeName);
		var typeNamespaceString = type.ContainingNamespace.ToDisplayString(CustomSymbolDisplayFormats.FullyQualifiedTypeName);

		var contextObject = new ScriptObject
		{
			{ nameof(assembly), assembly },
			{ nameof(serializerName), serializerName },
			{ nameof(nestedTypeString), nestedTypeString },
			{ nameof(fullyQualifiedTypeString), fullyQualifiedTypeString },
			{ nameof(typeNamespaceString), typeNamespaceString },
			{ nameof(paramList), paramList }
		};

		return ($"{fullyQualifiedTypeString}Serializer.g.cs", renderedTemplate.Value.Render(contextObject));
	}

	private const string TEMPLATE = @"#nullable enable
// <auto-generated />
using System;
using System.CodeDom.Compiler;
using Pando.DataSources;
using Pando.Serialization.NodeSerializers;
using {{ typeNamespaceString }};

namespace GeneratedSerializers;

[GeneratedCode(""{{ assembly.name }}"", ""{{ assembly.version }}"")]
public class {{ serializerName }} : INodeSerializer<{{ nestedTypeString }}>
{
	{{~ for param in paramList ~}}
private INodeSerializer<{{ param.type }}> _{{ param.name }}Serializer;
{{~ end ~}}

public {{ serializerName }}({{- for param in paramList -}}
INodeSerializer<{{ param.type }}> {{ param.name }}Serializer {{- if !for.last; ','; end; -}}
{{- end -}})
{
	{{~ for param in paramList ~}}
	_{{ param.name }}Serializer = {{ param.name }}Serializer;
	{{~ end ~}}

	NodeSize = {{ paramList.size }} * sizeof(ulong);
}

public int? NodeSize { get; }

public int NodeSizeForObject({{ nestedTypeString }} obj) =>
throw new NotImplementedException();

public void Serialize({{ nestedTypeString }} obj, Span<byte> writeBuffer, INodeDataSink dataSink) =>
throw new NotImplementedException();

public {{ nestedTypeString }} Deserialize(ReadOnlySpan<byte> readBuffer, INodeDataSource dataSource) =>
	throw new NotImplementedException();
}";
}
