#nullable enable
// <auto-generated />

using System;
using System.Buffers.Binary;
using System.CodeDom.Compiler;
using Pando.DataSources;
using Pando.Serialization.NodeSerializers;
using SerializerGeneratorUnitTests.TestFiles.TestSubjects;

namespace GeneratedSerializers;

[GeneratedCode("Pando.SerializerGenerator", "1.0.0.0")]
internal class ValidClassWithArraySerializer : INodeSerializer<ValidClassWithArray>
{
	private readonly INodeSerializer<int[]> _intArraySerializer;

	public ValidClassWithArraySerializer(
		INodeSerializer<int[]> intArraySerializer
	)
	{
		_intArraySerializer = intArraySerializer;

		int? size = 0;
		size += 1 * sizeof(ulong);
		NodeSize = size;
	}

	public int? NodeSize { get; }

	public int NodeSizeForObject(ValidClassWithArray obj)
	{
		if (NodeSize is not null) return NodeSize.Value;

		int size = 0;
		size += 1 * sizeof(ulong);
		return size;
	}

	public void Serialize(ValidClassWithArray obj, Span<byte> writeBuffer, INodeDataSink dataSink)
	{
		ulong intArrayHash = _intArraySerializer.SerializeToHash(obj.intArray, dataSink);
		BinaryPrimitives.WriteUInt64LittleEndian(writeBuffer[..sizeof(ulong)], intArrayHash);
	}

	public ValidClassWithArray Deserialize(ReadOnlySpan<byte> readBuffer, INodeDataSource dataSource)
	{
		ulong intArrayHash = BinaryPrimitives.ReadUInt64LittleEndian(readBuffer[..sizeof(ulong)]);
		var intArray = _intArraySerializer.DeserializeFromHash(intArrayHash, dataSource);

		return new ValidClassWithArray(intArray);
	}
}
