#nullable enable
// <auto-generated />

using System;
using System.Buffers.Binary;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Pando.DataSources;
using Pando.Serialization.NodeSerializers;
using SerializerGeneratorUnitTests.TestFiles.TestSubjects;

namespace GeneratedSerializers;

[GeneratedCode("Pando.SerializerGenerator", "1.0.0.0")]
internal class ValidClassWithGenericSerializer : INodeSerializer<ValidClassWithGeneric>
{
	private readonly INodeSerializer<List<object>> _myObjectsSerializer;

	public ValidClassWithGenericSerializer(
		INodeSerializer<List<object>> myObjectsSerializer
	)
	{
		_myObjectsSerializer = myObjectsSerializer;

		int? size = 0;
		size += 1 * sizeof(ulong);
		NodeSize = size;
	}

	public int? NodeSize { get; }

	public int NodeSizeForObject(ValidClassWithGeneric obj)
	{
		if (NodeSize is not null) return NodeSize.Value;

		int size = 0;
		size += 1 * sizeof(ulong);
		return size;
	}

	public void Serialize(ValidClassWithGeneric obj, Span<byte> writeBuffer, INodeDataSink dataSink)
	{
		ulong myObjectsHash = _myObjectsSerializer.SerializeToHash(obj.MyObjects, dataSink);
		BinaryPrimitives.WriteUInt64LittleEndian(writeBuffer[..sizeof(ulong)], myObjectsHash);
	}

	public ValidClassWithGeneric Deserialize(ReadOnlySpan<byte> readBuffer, INodeDataSource dataSource)
	{
		ulong myObjectsHash = BinaryPrimitives.ReadUInt64LittleEndian(readBuffer[..sizeof(ulong)]);
		var myObjects = _myObjectsSerializer.DeserializeFromHash(myObjectsHash, dataSource);

		return new ValidClassWithGeneric(myObjects);
	}
}
