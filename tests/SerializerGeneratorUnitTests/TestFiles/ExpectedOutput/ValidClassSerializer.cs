#nullable enable
// <auto-generated />

using System;
using System.Buffers.Binary;
using System.CodeDom.Compiler;
using Pando.DataSources;
using Pando.Serialization.NodeSerializers;
using Pando.Serialization.PrimitiveSerializers;
using SerializerGeneratorUnitTests.TestClasses;

namespace GeneratedSerializers;

[GeneratedCode("Pando.SerializerGenerator", "1.0.0.0")]
internal class ValidClassSerializer : INodeSerializer<ValidClass>
{
	private readonly IPrimitiveSerializer<int> _primitivePropSerializer;
	private readonly INodeSerializer<string> _nodePropSerializer;

	public ValidClassSerializer(
		IPrimitiveSerializer<int> primitivePropSerializer,
		INodeSerializer<string> nodePropSerializer
	)
	{
		_primitivePropSerializer = primitivePropSerializer;
		_nodePropSerializer = nodePropSerializer;

		int? size = 0;
		size += _primitivePropSerializer.ByteCount;
		size += 1 * sizeof(ulong);
		NodeSize = size;
	}

	public int? NodeSize { get; }

	public int NodeSizeForObject(ValidClass obj)
	{
		if (NodeSize is not null) return NodeSize.Value;

		int size = 0;
		size += _primitivePropSerializer.ByteCountForValue(obj.PrimitiveProp);
		size += 1 * sizeof(ulong);
		return size;
	}

	public void Serialize(ValidClass obj, Span<byte> writeBuffer, INodeDataSink dataSink)
	{
		_primitivePropSerializer.Serialize(obj.PrimitiveProp, ref writeBuffer);

		ulong nodePropHash = _nodePropSerializer.SerializeToHash(obj.NodeProp, dataSink);
		BinaryPrimitives.WriteUInt64LittleEndian(writeBuffer[..sizeof(ulong)], nodePropHash);
	}

	public ValidClass Deserialize(ReadOnlySpan<byte> readBuffer, INodeDataSource dataSource)
	{
		var primitiveProp = _primitivePropSerializer.Deserialize(ref readBuffer);

		ulong nodePropHash = BinaryPrimitives.ReadUInt64LittleEndian(readBuffer[..sizeof(ulong)]);
		var nodeProp = _nodePropSerializer.DeserializeFromHash(nodePropHash, dataSource);

		return new ValidClass(primitiveProp, nodeProp);
	}
}
